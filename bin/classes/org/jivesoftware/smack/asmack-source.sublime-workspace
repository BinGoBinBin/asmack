{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"contents": "/*\n * Copyright 2009 Mike Cumings\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.kenai.jbosh;\n\n/**\n * Abstract base class for attribute implementations based on {@code Integer}\n * types.  Additional support for parsing of integer values from their\n * {@code String} representations as well as callback handling of value\n * validity checks are also provided.\n */\nabstract class AbstractIntegerAttr extends AbstractAttr<Integer> {\n    \n    /**\n     * Creates a new attribute object.\n     * \n     * @param val attribute value\n     * @throws BOSHException on parse or validation failure\n     */\n    protected AbstractIntegerAttr(final int val) throws BOSHException {\n        super(Integer.valueOf(val));\n    \n    /**\n     * Creates a new attribute object.\n     *\n     * @param val attribute value in string form\n     * @throws BOSHException on parse or validation failure\n     */\n    protected AbstractIntegerAttr(final String val) throws BOSHException {\n        super(parseInt(val));\n    }\n\n    /**\n     * Utility method intended to be called by concrete implementation\n     * classes from within the {@code check()} method when the concrete\n     * class needs to ensure that the integer value does not drop below\n     * the specified minimum value.\n     *\n     * @param minVal minimum value to allow\n     * @throws BOSHException if the integer value is below the specific\n     *  minimum\n     */\n    protected final void checkMinValue(int minVal) throws BOSHException {\n        int intVal = getValue();\n        if (intVal < minVal) {\n            throw(new BOSHException(\n                    \"Illegal attribute value '\" + intVal + \"' provided.  \"\n                    + \"Must be >= \" + minVal));\n        }\n    }\n\n    /**\n     * Utility method to parse a {@code String} into an {@code Integer},\n     * converting any possible {@code NumberFormatException} thrown into\n     * a {@code BOSHException}.\n     *\n     * @param str string to parse\n     * @return integer value\n     * @throws BOSHException on {@code NumberFormatException}\n     */\n    private static int parseInt(final String str) throws BOSHException {\n        try {\n            return Integer.parseInt(str);\n        } catch (NumberFormatException nfx) {\n            throw(new BOSHException(\n                    \"Could not parse an integer from the value provided: \"\n                    + str,\n                    nfx));\n        }\n    }\n\n    /**\n     * Returns the native {@code int} value of the underlying {@code Integer}.\n     * Will throw {@code NullPointerException} if the underlying\n     * integer was {@code null}.\n     *\n     * @return native {@code int} value\n     */\n    public int intValue() {\n        return getValue().intValue();\n    }\n\n}\n",
			"file": "/Users/liubin/work/social/workspace/ASmack/com/kenai/jbosh/AbstractIntegerAttr.java",
			"file_size": 3240,
			"file_write_time": 130374292820000000,
			"settings":
			{
				"buffer_size": 3234,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ConnectionConfiguration.java",
			"settings":
			{
				"buffer_size": 28218,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Roster.java",
			"settings":
			{
				"buffer_size": 43591,
				"line_ending": "Unix"
			}
		},
		{
			"file": "packet/Presence.java",
			"settings":
			{
				"buffer_size": 11328,
				"line_ending": "Unix"
			}
		},
		{
			"file": "RosterListener.java",
			"settings":
			{
				"buffer_size": 2987,
				"line_ending": "Unix"
			}
		},
		{
			"file": "RosterEntry.java",
			"settings":
			{
				"buffer_size": 7412,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ChatManager.java",
			"settings":
			{
				"buffer_size": 9753,
				"line_ending": "Unix"
			}
		},
		{
			"file": "XMPPConnection.java",
			"settings":
			{
				"buffer_size": 42151,
				"line_ending": "Unix"
			}
		},
		{
			"file": "PacketWriter.java",
			"settings":
			{
				"buffer_size": 7526,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/**\n * $RCSfile$\n * $Revision$\n * $Date$\n *\n * Copyright 2009 Robin Collier.\n *\n * All rights reserved. Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, so\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.jivesoftware.smackx.pubsub;\n\nimport org.jivesoftware.smack.Connection;\n\npublic class CollectionNode extends Node\n{\n	CollectionNode(Connection connection, String nodeId)\n	{\n		super(connection, nodeId);\n	}\n\n}\n",
			"file": "/Users/liubin/work/social/workspace/ASmack/org/jivesoftware/smackx/pubsub/CollectionNode.java",
			"file_size": 891,
			"file_write_time": 130374292820000000,
			"settings":
			{
				"buffer_size": 873,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Chat.java",
			"settings":
			{
				"buffer_size": 6043,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/liubin/work/social/workspace/ASmack/org/xbill/DNS/Message.java",
			"settings":
			{
				"buffer_size": 13900,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/liubin/work/social/workspace/ASmack/org/jivesoftware/smackx/filetransfer/OutgoingFileTransfer.java",
			"settings":
			{
				"buffer_size": 14100,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "s/**\n * $RCSfile$\n * $Revision$\n * $Date$\n *\n * Copyright 2003-2006 Jive Software.\n *\n * All rights reserved. Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.jivesoftware.smackx.filetransfer;\n\nimport org.jivesoftware.smackx.packet.StreamInitiation;\n\n/**\n * A request to send a file recieved from another user.\n * \n * @author Alexander Wenckus\n * \n */\npublic class FileTransferRequest {\n	private final StreamInitiation streamInitiation;\n\n	private final FileTransferManager manager;\n\n	/**\n	 * A recieve request is constructed from the Stream Initiation request\n	 * received from the initator.\n	 * \n	 * @param manager\n	 *            The manager handling this file transfer\n	 * \n	 * @param si\n	 *            The Stream initiaton recieved from the initiator.\n	 */\n	public FileTransferRequest(FileTransferManager manager, StreamInitiation si) {\n		this.streamInitiation = si;\n		this.manager = manager;\n	}\n\n	/**\n	 * Returns the name of the file.\n	 * \n	 * @return Returns the name of the file.\n	 */\n	public String getFileName() {\n		return streamInitiation.getFile().getName();\n	}\n\n	/**\n	 * Returns the size in bytes of the file.\n	 * \n	 * @return Returns the size in bytes of the file.\n	 */\n	public long getFileSize() {\n		return streamInitiation.getFile().getSize();\n	}\n\n	/**\n	 * Returns the description of the file provided by the requestor.\n	 * \n	 * @return Returns the description of the file provided by the requestor.\n	 */\n	public String getDescription() {\n		return streamInitiation.getFile().getDesc();\n	}\n\n	/**\n	 * Returns the mime-type of the file.\n	 * \n	 * @return Returns the mime-type of the file.\n	 */\n	public String getMimeType() {\n		return streamInitiation.getMimeType();\n	}\n\n	/**\n	 * Returns the fully-qualified jabber ID of the user that requested this\n	 * file transfer.\n	 * \n	 * @return Returns the fully-qualified jabber ID of the user that requested\n	 *         this file transfer.\n	 */\n	public String getRequestor() {\n		return streamInitiation.getFrom();\n	}\n\n	/**\n	 * Returns the stream ID that uniquely identifies this file transfer.\n	 * \n	 * @return Returns the stream ID that uniquely identifies this file\n	 *         transfer.\n	 */\n	public String getStreamID() {\n		return streamInitiation.getSessionID();\n	}\n\n	/**\n	 * Returns the stream initiation packet that was sent by the requestor which\n	 * contains the parameters of the file transfer being transfer and also the\n	 * methods available to transfer the file.\n	 * \n	 * @return Returns the stream initiation packet that was sent by the\n	 *         requestor which contains the parameters of the file transfer\n	 *         being transfer and also the methods available to transfer the\n	 *         file.\n	 */\n	protected StreamInitiation getStreamInitiation() {\n		return streamInitiation;\n	}\n\n	/**\n	 * Accepts this file transfer and creates the incoming file transfer.\n	 * \n	 * @return Returns the <b><i>IncomingFileTransfer</b></i> on which the\n	 *         file transfer can be carried out.\n	 */\n	public IncomingFileTransfer accept() {\n		return manager.createIncomingFileTransfer(this);\n	}\n\n	/**\n	 * Rejects the file transfer request.\n	 */\n	public void reject() {\n		manager.rejectIncomingFileTransfer(this);\n	}\n\n}\n",
			"file": "/Users/liubin/work/social/workspace/ASmack/org/jivesoftware/smackx/filetransfer/FileTransferRequest.java",
			"file_size": 3835,
			"file_write_time": 130374292820000000,
			"settings":
			{
				"buffer_size": 3698,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/Users/liubin/work/social/workspace/ASmack/org/jivesoftware/smackx/filetransfer/FileTransfer.java",
			"settings":
			{
				"buffer_size": 9041,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/Users/liubin/work/social/workspace/ASmack/org/jivesoftware/smackx/filetransfer/FileTransferManager.java",
			"settings":
			{
				"buffer_size": 6100,
				"line_ending": "Windows"
			}
		},
		{
			"file": "RosterGroup.java",
			"settings":
			{
				"buffer_size": 9024,
				"line_ending": "Unix"
			}
		},
		{
			"file": "RosterStorage.java",
			"settings":
			{
				"buffer_size": 1697,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"",
				"Build: Cancel"
			]
		],
		"width": 392.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/liubin/work/social/workspace/ASmack/org/jivesoftware/smack/ConnectionListener.java",
		"/Users/liubin/work/social/workspace/ASmack/org/jivesoftware/smackx/filetransfer/FileTransferListener.java",
		"/Users/liubin/work/social/workspace/ASmack/org/jivesoftware/smackx/Form.java",
		"/Users/liubin/work/social/workspace/ASmack/org/jivesoftware/smackx/MessageEventManager.java",
		"/Users/liubin/work/social/workspace/ASmack/org/xbill/DNS/Master.java",
		"/Users/liubin/work/social/workspace/ASmack/org/jivesoftware/smack/Chat.java",
		"/Users/liubin/work/social/workspace/ASmack/org/apache/harmony/javax/security/auth/callback/CallbackHandler.java",
		"/Users/liubin/work/social/workspace/ASmack/org/jivesoftware/smack/packet/RosterPacket.java",
		"/Users/liubin/work/social/workspace/ASmack/org/jivesoftware/smack/XMPPConnection.java",
		"/Users/liubin/work/social/workspace/ASmack/org/jivesoftware/smack/RosterGroup.java",
		"/Users/liubin/work/social/workspace/ASmack/org/jivesoftware/smack/RosterStorage.java",
		"/Users/liubin/work/social/workspace/ASmack/org/jivesoftware/smackx/workgroup/agent/RevokedOffer.java",
		"/Users/liubin/work/social/workspace/ASmack/org/jivesoftware/smack/Roster.java",
		"/Users/liubin/work/social/workspace/ASmack/org/xbill/DNS/DClass.java",
		"/Users/liubin/work/social/workspace/ASmack/org/jivesoftware/smack/util/collections/DefaultMapEntry.java",
		"/Users/liubin/work/social/workspace/ASmack/org/jivesoftware/smack/debugger/SmackDebugger.java"
	],
	"find":
	{
		"height": 23.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"authenticated",
			"packetWriter",
			"connection",
			"status",
			"extend",
			"CopyOnWriteArrayList",
			"rosterListeners",
			"rosterModified",
			"rosterListeners"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 7,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/Users/liubin/work/social/workspace/ASmack/com/kenai/jbosh/AbstractIntegerAttr.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3234,
						"regions":
						{
						},
						"selection":
						[
							[
								959,
								959
							]
						],
						"settings":
						{
							"syntax": "Packages/Java/Java.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "ConnectionConfiguration.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 28218,
						"regions":
						{
						},
						"selection":
						[
							[
								27658,
								27658
							]
						],
						"settings":
						{
							"syntax": "Packages/Java/Java.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 11201.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Roster.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 43591,
						"regions":
						{
						},
						"selection":
						[
							[
								7109,
								7186
							]
						],
						"settings":
						{
							"syntax": "Packages/Java/Java.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2231.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "packet/Presence.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11328,
						"regions":
						{
						},
						"selection":
						[
							[
								4310,
								4313
							]
						],
						"settings":
						{
							"syntax": "Packages/Java/Java.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1192.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "RosterListener.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2987,
						"regions":
						{
						},
						"selection":
						[
							[
								2933,
								2933
							]
						],
						"settings":
						{
							"syntax": "Packages/Java/Java.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 653.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "RosterEntry.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7412,
						"regions":
						{
						},
						"selection":
						[
							[
								4408,
								4408
							]
						],
						"settings":
						{
							"syntax": "Packages/Java/Java.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1738.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "ChatManager.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9753,
						"regions":
						{
						},
						"selection":
						[
							[
								3237,
								3247
							]
						],
						"settings":
						{
							"syntax": "Packages/Java/Java.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1269.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "XMPPConnection.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 42151,
						"regions":
						{
						},
						"selection":
						[
							[
								286,
								286
							]
						],
						"settings":
						{
							"syntax": "Packages/Java/Java.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "PacketWriter.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7526,
						"regions":
						{
						},
						"selection":
						[
							[
								2921,
								2921
							]
						],
						"settings":
						{
							"syntax": "Packages/Java/Java.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1007.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/Users/liubin/work/social/workspace/ASmack/org/jivesoftware/smackx/pubsub/CollectionNode.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 873,
						"regions":
						{
						},
						"selection":
						[
							[
								399,
								399
							]
						],
						"settings":
						{
							"syntax": "Packages/Java/Java.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "Chat.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6043,
						"regions":
						{
						},
						"selection":
						[
							[
								3157,
								3168
							]
						],
						"settings":
						{
							"syntax": "Packages/Java/Java.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1232.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "/Users/liubin/work/social/workspace/ASmack/org/xbill/DNS/Message.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13900,
						"regions":
						{
						},
						"selection":
						[
							[
								2988,
								2988
							]
						],
						"settings":
						{
							"syntax": "Packages/Java/Java.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 421.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "/Users/liubin/work/social/workspace/ASmack/org/jivesoftware/smackx/filetransfer/OutgoingFileTransfer.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14100,
						"regions":
						{
						},
						"selection":
						[
							[
								10434,
								10434
							]
						],
						"settings":
						{
							"syntax": "Packages/Java/Java.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 4500.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "/Users/liubin/work/social/workspace/ASmack/org/jivesoftware/smackx/filetransfer/FileTransferRequest.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3698,
						"regions":
						{
						},
						"selection":
						[
							[
								1000,
								1000
							]
						],
						"settings":
						{
							"syntax": "Packages/Java/Java.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "/Users/liubin/work/social/workspace/ASmack/org/jivesoftware/smackx/filetransfer/FileTransfer.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9041,
						"regions":
						{
						},
						"selection":
						[
							[
								999,
								1017
							]
						],
						"settings":
						{
							"syntax": "Packages/Java/Java.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": -0.0,
						"translation.y": 221.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "/Users/liubin/work/social/workspace/ASmack/org/jivesoftware/smackx/filetransfer/FileTransferManager.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6100,
						"regions":
						{
						},
						"selection":
						[
							[
								4182,
								4223
							]
						],
						"settings":
						{
							"syntax": "Packages/Java/Java.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1689.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "RosterGroup.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9024,
						"regions":
						{
						},
						"selection":
						[
							[
								1409,
								1456
							]
						],
						"settings":
						{
							"syntax": "Packages/Java/Java.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 314.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "RosterStorage.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1697,
						"regions":
						{
						},
						"selection":
						[
							[
								468,
								468
							]
						],
						"settings":
						{
							"syntax": "Packages/Java/Java.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 100.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "asmack-source.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"xmpp",
				"org/jivesoftware/smack/XMPPConnection.java"
			],
			[
				"packetwriter",
				"org/jivesoftware/smack/PacketWriter.java"
			],
			[
				"chat",
				"org/jivesoftware/smack/Chat.java"
			],
			[
				"connection",
				"org/jivesoftware/smack/ConnectionConfiguration.java"
			],
			[
				"filetransferres",
				"org/jivesoftware/smackx/filetransfer/FileTransferRequest.java"
			],
			[
				"out",
				"org/jivesoftware/smackx/filetransfer/OutgoingFileTransfer.java"
			],
			[
				"filetr",
				"org/jivesoftware/smackx/filetransfer/FileTransferManager.java"
			],
			[
				"file",
				"org/jivesoftware/smackx/filetransfer/FileTransfer.java"
			],
			[
				"outgoingfiletransfer",
				"org/jivesoftware/smackx/filetransfer/OutgoingFileTransfer.java"
			],
			[
				"messa",
				"org/xbill/DNS/Message.java"
			],
			[
				"chatmanager",
				"org/jivesoftware/smack/ChatManager.java"
			],
			[
				"rosterpacket",
				"org/jivesoftware/smack/packet/RosterPacket.java"
			],
			[
				"presence",
				"org/jivesoftware/smack/packet/Presence.java"
			],
			[
				"rosterlistener",
				"org/jivesoftware/smack/RosterListener.java"
			],
			[
				"roster",
				"org/jivesoftware/smack/RosterEntry.java"
			],
			[
				"rosterentry",
				"org/jivesoftware/smack/RosterEntry.java"
			],
			[
				"xmppconnection",
				"org/jivesoftware/smack/XMPPConnection.java"
			],
			[
				"connectionconfiguration",
				"org/jivesoftware/smack/ConnectionConfiguration.java"
			],
			[
				"",
				"com/kenai/jbosh/AbstractIntegerAttr.java"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
